{"version":3,"file":"static/webpack/static/development/pages/index.js.6635bf6435092ee4aabb.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import Component from 'react'\nimport Link from 'next/link'\nimport near from 'nearlib'\n\nconst accountId = \"alice.near\";\nconst contractName = \"metanear\";\n\nclass Grid extends React.Component {\n    componentDidMount() {\n        const canvas = this.refs.canvas\n        const ctx = canvas.getContext(\"2d\")\n        for (let i = 0; i < this.props.width / this.props.cellWidth; ++i) {\n            ctx.beginPath()\n            ctx.moveTo(i * this.props.cellWidth, 0)\n            ctx.lineTo(i * this.props.cellWidth, this.props.height)\n            ctx.stroke()\n        }\n        for (let i = 0; i < this.props.height / this.props.cellHeight; ++i) {\n            ctx.beginPath()\n            ctx.moveTo(0, i * this.props.cellHeight)\n            ctx.lineTo(this.props.width, i * this.props.cellHeight)\n            ctx.stroke()\n        }\n        for (let i = 0; i < this.props.cells.length; ++i) {\n            ctx.fillRect(\n                (this.props.cells[i].location.x) * this.props.cellWidth,\n                (this.props.cells[i].location.y) * this.props.cellHeight,\n                this.props.cellWidth,\n                this.props.cellHeight)\n        }\n    }\n    render() {\n        return (\n            <canvas ref=\"canvas\" width={this.props.width} height={this.props.height} />\n        )\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { \n            cells: [{ location: { x: 1, y: 1 }, viewIndex: 1, contractId: \"ads\", webUrl: \"123\", owner: \"xyz\" }], \n            highlighCell: {}\n        }\n    }\n    componentDidMount() {\n        // console.log(near)\n        // nearlib.Near.loadContract(contractName, {\n        //     viewMethods: [\"getCellView\"],\n        //     changeMethods: [],\n        //     sender: accountId\n        // }).then((contract) => {\n        //     this.contract = contract;\n        //     this.contract.getCellView()\n        //         .then((cells) => {\n        //             this.setState({ cells })\n        //         });\n        // })\n    }\n    onHighlight = (x, y) => {\n        for (let i = 0; i < this.state.cells.length; ++i) {\n            if (this.state.cells[i].location.x == x && this.state.cells[i].location.y == y) {\n                this.state.highlighCell = this.state.cells[i]\n                break\n            }\n        }        \n    }\n    render() {\n        return (\n            <div>\n                <Grid width={640} height={425} cellWidth={20} cellHeight={20} cells={this.state.cells} onHighlight={this.onHighlight} />\n                <div>{JSON.stringify(this.state.highlighCell)}</div>\n            </div>\n        )\n    }\n}\n\nexport default function Index() {\n    return (\n        <div>\n            <Game />\n        </div>\n    )\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;;;AA5BA;AACA;AA8BA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAFA;AAMA;AACA;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AASA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AArCA;AACA;AAuCA;AACA;AAKA;;;;A","sourceRoot":""}