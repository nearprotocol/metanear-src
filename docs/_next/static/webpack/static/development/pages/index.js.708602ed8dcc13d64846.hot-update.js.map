{"version":3,"file":"static/webpack/static/development/pages/index.js.708602ed8dcc13d64846.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import Component from 'react'\nimport { Tabs, Tab, ToggleButtonGroup, ToggleButton } from 'react-bootstrap'\nimport Head from 'next/head'\n// import { Near } from 'nearlib'\n\nconst USE_WALLET = false;\nconst contractId = \"metanear-dev-003\";\nconst localStorageKeyCellPrefix = \"cell:\";\nconst localStorageKeyCellInfoPrefix = \"cellInfo:\"\nconst appTitle = \"Meta NEAR\"\nconst baseUrl = \"http://localhost:3000\"\nconst playerImgUrl = '/static/imgs/player.png';\nconst viewDistance = 7;\nconst localNearlibUrl = 'https://cdn.jsdelivr.net/gh/nearprotocol/nearcore@master/nearlib/dist/nearlib.js';\nconst devnetNearlibUrl = 'https://cdn.jsdelivr.net/npm/nearlib@0.4.7/dist/nearlib.js';\nconst DX = [1, 0, -1, 0];\nconst DY = [0, 1, 0, -1];\n\n\nconst locationKey = (location) => JSON.stringify(location);\nconst cellKey = (cell) => locationKey(cell.location);\nconst grassColor = (a) => `rgb(${Math.round(86*a)}, ${Math.round(125*a)}, ${Math.round(70*a)})`;\nconst _offsetCache = [];\nconst isClose = (dx, dy, maxDistance) => (Math.abs(dx) <= maxDistance && Math.abs(dy) <= maxDistance);\nconst cellOffsets = (i) => {\n    if (_offsetCache.length == 0) {\n        for (let dy = -viewDistance; dy <= viewDistance; ++dy) {\n            for (let dx = -viewDistance; dx <= viewDistance; ++dx) {\n                _offsetCache.push({dx, dy});\n            }\n        }\n    }\n    return _offsetCache[i];\n};\n\nclass Grid extends React.Component {\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const canvas = this.refs.canvas\n        const ctx = canvas.getContext(\"2d\")\n        ctx.clearRect(0, 0, this.props.width, this.props.height);\n        const centerX = this.props.width / 2 - this.props.cellWidth / 2\n        const centerY = this.props.height / 2 - this.props.cellHeight / 2\n        const cellNumberX = this.props.width / this.props.cellWidth\n        const cellNumberY = this.props.height / this.props.cellHeight\n        /*\n        ctx.fillStyle = \"#FF0000\";\n        for (let i =  - cellNumberX / 2; i < cellNumberX / 2; ++i) {\n            ctx.beginPath()\n            ctx.moveTo(centerX + i * this.props.cellWidth, 0)\n            ctx.lineTo(centerX + i * this.props.cellWidth, this.props.height)\n            ctx.stroke()\n        }\n        for (let i = - cellNumberY; i < cellNumberY; ++i) {\n            ctx.beginPath()\n            ctx.moveTo(0, centerY + (i - 0.7) * this.props.cellHeight)\n            ctx.lineTo(this.props.width, centerY + (i - 0.7) * this.props.cellHeight)\n            ctx.stroke()\n        }\n        */\n        const dxDy = (location) => {\n            return {\n                dx: location.x - (this.props.player && this.props.player.location.x),\n                dy: location.y - (this.props.player && this.props.player.location.y),\n            };\n        }\n        const dxDyRect = (d) => {\n            return {\n                x: centerX + d.dx * this.props.cellWidth,\n                y: centerY + d.dy * this.props.cellHeight,\n                width: this.props.cellWidth,\n                height: this.props.cellHeight,\n            }\n        };\n        const renderImg = (rect, imageUrl) => {\n            if (!imageUrl) {\n                return;\n            }\n            let image = this.props.images[imageUrl];\n            if (image) {\n                ctx.drawImage(image, 0, 0, image.width, image.height, rect.x, rect.y, rect.width, rect.height);\n                return true;\n            }\n            return false;\n        }\n        Object.values(this.props.allCells).forEach((cell) => {\n            let cellInfo = this.props.cellInfos[cell.cellId];\n            const d = dxDy(cell.location);\n            const rect = dxDyRect(d);\n            let rendered = cellInfo && renderImg(rect, cellInfo.imageUrl);\n            if (!rendered) {\n                ctx.fillStyle = 'rgba(64, 0, 0, 1.0)';\n                ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n            }\n        })\n        renderImg(dxDyRect({dx: 0, dy: 0}), playerImgUrl);\n        const path = this.props.movePath;\n        if (path) {\n            let pos = {\n                dx: 0,\n                dy: 0,\n            };\n            for (let i = 0; i < path.length; ++i) {\n                pos = {\n                    dx: pos.dx + DX[path[i]],\n                    dy: pos.dy + DY[path[i]],\n                }\n                renderImg(dxDyRect(pos), playerImgUrl);\n            }\n        }\n        document.addEventListener('mousemove', this.onMouseMove, false)\n    }\n    componentWillUnmount() {\n        document.removeEventListener('mousemove', this.onMouseMove, false)\n    }\n    onMouseMove = (e) => {\n        const centerX = this.props.width / 2 - this.props.cellWidth / 2\n        const centerY = this.props.height / 2 - this.props.cellHeight / 2\n        this.props.onHighlight(\n            Math.floor((e.offsetX - centerX) / this.props.cellWidth) + (this.props.player && this.props.player.location.x),\n            Math.floor((e.offsetY - centerY) / this.props.cellHeight) + (this.props.player && this.props.player.location.y))\n    }\n    render() {\n        return (\n            <div>\n                <canvas ref=\"canvas\" width={this.props.width} height={this.props.height} onClick={this.props.onClick} />\n            </div>\n        )\n    }\n}\n\nclass WalletLogin extends React.Component {\n    render() {\n        return (\n            <div id=\"sign-in-container\">\n                <h2> Hello stranger! Who are you?</h2>\n                <div id=\"login-form\">\n                    <div className=\"col-md-4\"><button onClick={this.props.onClick} id=\"login-button\" className=\"btn btn-lg btn-block btn-primary\">Login with NEAR Wallet</button></div>\n                </div>\n            </div> \n        )\n    }\n}\n\nclass WalletLogout extends React.Component {\n    render() {\n        return (\n            <div id=\"hello\">\n                <h2 id=\"hello\">Hi, {this.props.accountId}!</h2>\n            </div>\n        )\n    }\n}\n\nclass MiniGameView extends React.Component {\n    render() {\n        return (\n            <iframe src={this.props.url} frameBorder=\"0\" width=\"100%\" height=\"100%\"/>\n        )\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { \n            allCells: {},\n            highlightCell: {},\n            images: {},\n            movePath: null,\n            player: null,\n            cellInfos: {},\n            tabKey: \"info\",\n            actionType: \"move\",\n        };\n        this.fetchingImages = {};\n        this.fetchingCellInfos = {};\n        this.walletAccount = null;\n    }\n    fetchImage = (imageUrl) => {\n        if (imageUrl in this.fetchingImages) {\n            return;\n        }\n        this.fetchingImages[imageUrl] = true;\n        const image = new Image(32, 32);\n        image.onload = () => {\n            const images = {};\n            images[imageUrl] = image;\n            this.setState({\n                images: Object.assign(this.state.images, images),\n            });\n        };\n        image.src = imageUrl;\n    }\n    addCellInfo = (cellId, cellInfo) => {\n        cellInfo.cellId = cellId;\n        const cellInfos = {};\n        cellInfos[cellId] = cellInfo;\n        localStorage.setItem(localStorageKeyCellInfoPrefix + cellId, JSON.stringify(cellInfo))\n        if (cellInfo.imageUrl) {\n            this.fetchImage(cellInfo.imageUrl);\n        }\n        this.setState({\n            cellInfos: Object.assign(this.state.cellInfos, cellInfos),\n        });\n    }\n    checkCellInfo = (cellId) => {\n        if (cellId in this.fetchingCellInfos) {\n            return;\n        }\n        this.fetchingCellInfos[cellId] = true;\n        this.contract.getCellInfo({cellId})\n            .then((cellInfo) => this.addCellInfo(cellId, cellInfo))\n            .catch((e) => {\n                console.log(e);\n                this.fetchingCellInfos[cellId] = null;\n            });\n\n    }\n    updateView = (view) => {\n        let cells = {};\n        let player = Object.assign({}, this.state.player, {location: view.location});\n        if (view.cellIds) {\n            view.cellIds.forEach((cellId, i) => {\n                let location = {\n                    x: view.location.x + cellOffsets(i).dx,\n                    y: view.location.y + cellOffsets(i).dy,\n                }\n                let cell = {\n                    location,\n                    cellId,\n                };\n                this.checkCellInfo(cellId);\n                cells[cellKey(cell)] = cell\n                // localStorage.setItem(localStorageKeyCellPrefix + cellKey(cell), JSON.stringify(cell))\n            })\n        }\n        this.setState({\n            player,\n            allCells: cells,\n            movePath: null,\n            highlightCell: null,\n        })\n    }\n\n    fetchCells = async() => {\n        let accountId = this.state.player ? this.state.player.accountId : 'metanear';\n        let view = await this.contract.lookAround({ accountId })\n        this.updateView(view);\n    }\n    nearConnect = async () => {\n        let near, accountId;\n        if (USE_WALLET) {\n            this.walletAccount = new nearlib.WalletAccount(contractId, \"https://wallet.nearprotocol.com/\");\n            accountId = this.walletAccount.getAccountId();\n            near = new nearlib.Near(new nearlib.NearClient(\n                this.walletAccount,\n                new nearlib.LocalNodeConnection(\"https://studio.nearprotocol.com/devnet\"),\n            ));\n        } else {\n            const settings = {\n                deps: {\n                    createAccount: nearlib.dev.createAccountWithLocalNodeConnection\n                },\n                nodeUrl: 'http://localhost:3030',\n            };\n            near = await nearlib.dev.connect(settings);\n            accountId = nearlib.dev.myAccountId;\n            this.walletAccount = {\n                isSignedIn: () => true,\n                getAccountId: () => accountId,\n            };\n        }\n        console.log(accountId);\n        this.contract = await near.loadContract(contractId, {\n            viewMethods: [\"lookAround\", \"getPlayer\", \"getCellInfo\"],\n            changeMethods: [\"move\", \"deploy\", \"init\", \"createNewCell\"],\n            sender: accountId,\n        });\n        window.contract = this.contract\n        if (accountId) {\n            let player = await this.contract.getPlayer({accountId})\n            console.log(player)\n            this.setState({player, tabKey: \"map\"})\n        }\n        await this.fetchCells();\n    }\n    componentDidMount() {\n        let cellInfos = {};\n        Object.keys(localStorage).forEach((key) => {\n            if (key.startsWith(localStorageKeyCellInfoPrefix)) {\n                try {\n                    let cellInfo = JSON.parse(localStorage.getItem(key))\n                    if (localStorageKeyCellInfoPrefix + cellInfo.cellId == key) {\n                        if (cellInfo.imageUrl) {\n                            this.fetchImage(cellInfo.imageUrl);\n                        }\n                        cellInfos[cellInfo.cellId] = cellInfo;\n                    }\n                } catch (err) {\n                    // whatever\n                }\n            }\n        })\n        this.setState({ cellInfos })\n        this.fetchImage(playerImgUrl);\n        this.nearConnect();\n    }\n    onHighlight = (x, y) => {\n        let highlightCell = this.state.allCells[locationKey({x, y})]\n        if (highlightCell != this.state.highlightCell) {\n            this.setState({\n                highlightCell,\n                movePath: this.calculatePath(highlightCell)\n            })\n        }\n    }\n    login = () => {\n        this.walletAccount.requestSignIn(\n            contractId,\n            appTitle,\n        );\n    }\n    logout = () => {\n\n    }\n    calculatePath = (targetCell) => {\n        if (!this.state.player || !targetCell) {\n            return null;\n        }\n        const px = this.state.player.location.x;\n        const py = this.state.player.location.y;\n        const tx = targetCell.location.x;\n        const ty = targetCell.location.y;\n        const visited = {};\n        const q = [];\n        const add = (st) => {\n            const key = locationKey({\n                x: st.x,\n                y: st.y,\n            });\n            if (key in visited || !(key in this.state.allCells)) {\n                return;\n            }\n            let cellInfo = this.state.cellInfos[this.state.allCells[key].cellId];\n            if (!cellInfo || cellInfo.blocking) {\n                return;\n            }\n            visited[key] = st;\n            q.push(st);\n        }\n        add({\n            x: px,\n            y: py,\n            dir: -1,\n            last: null,\n        });\n        for (let i = 0; i < q.length; ++i) {\n            let cur = q[i];\n            if (cur.x == tx && cur.y == ty) {\n                // found\n                let path = [];\n                while (cur.last != null) {\n                    path.push(cur.dir);\n                    cur = cur.last;\n                }\n                return path.reverse();\n            }\n            for (let j = 0; j < 4; ++j) {\n                add({\n                    x: cur.x + DX[j],\n                    y: cur.y + DY[j],\n                    dir: j,\n                    last: cur,\n                });\n            }\n        }\n        return null;\n    }\n    movePlayer = () => {\n        if (!this.state.movePath) {\n            return\n        }\n        this.contract.move({path: this.state.movePath})\n            .then((res) => this.updateView(res.lastResult))\n            .catch((e) => console.log(e));\n    }\n    handleActionChange = (actionType) => {\n        this.setState({actionType});\n    }\n    render() {\n        let control;\n        if (this.walletAccount && this.walletAccount.isSignedIn()) {\n            control = <WalletLogout accountId={this.walletAccount.getAccountId()} onClick={this.logout} />\n        } else {\n            control = <WalletLogin onClick={this.login} />\n        }\n        let cellInfo = null;\n        if (this.state.player) {\n            let cell = this.state.allCells[locationKey(this.state.player.location)];\n            if (cell) {\n                let cellId = cell.cellId;\n                cellInfo = this.state.cellInfos[cellId];\n            }\n        }\n        const isWebPage = cellInfo && !!cellInfo.webUrl;\n        return (\n            <Tabs\n                id=\"controlled-tab-example\"\n                activeKey={this.state.tabKey}\n                onSelect={tabKey => this.setState({ tabKey })}\n            >\n                <Tab eventKey=\"info\" title= \"📜Info\">\n                    {control}\n                </Tab>\n                <Tab eventKey=\"map\" title=\"🌎World\">\n                    <Grid width={32 * 15} height={32 * 15} cellWidth={32} cellHeight={32}\n                          allCells={this.state.allCells} onHighlight={this.onHighlight}\n                          images={this.state.images} cellInfos={this.state.cellInfos}\n                          player={this.state.player} movePath={this.state.movePath}\n                          actionType={this.state.actionType}\n                          onClick={this.movePlayer} />\n                    <ToggleButtonGroup\n                        aria-label=\"Action\"\n                        name=\"action-types\"\n                        value={this.state.actionType}\n                        onChange={(v) => this.handleActionChange(v)}\n                    >\n                        <ToggleButton variant=\"outline-secondary\" value={\"inspect\"}>Inspect</ToggleButton>\n                        <ToggleButton variant=\"outline-secondary\" value={\"move\"}>Move</ToggleButton>\n                        <ToggleButton variant=\"outline-secondary\" value={\"deploy\"}>Deploy</ToggleButton>\n                    </ToggleButtonGroup>\n                </Tab>\n                <Tab eventKey=\"cell-view\" title=\"🏢Cell View\" disabled={!isWebPage}>\n                    {isWebPage && <MiniGameView url={cellInfo.webUrl} contractId={cellInfo.contractId} />}\n                </Tab>\n                <Tab eventKey=\"chat\" title=\"💬Chat\" disabled>\n                    Bla\n                </Tab>\n            </Tabs>\n        )\n    }\n}\n\nexport default () => {\n    return (\n        <div>\n            <Head>\n                <script src={USE_WALLET ? devnetNearlibUrl : localNearlibUrl}></script>\n            </Head>\n            <div>\n                <Game />\n            </div>\n        </div>\n    )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AA+EA;AACA;AACA;AACA;AAAA;AAGA;AACA;;;;;;AArFA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;;;AACA;AACA;AACA;;;AAQA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AA5FA;AACA;AA8FA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAVA;AACA;AAYA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;;;;AAPA;AACA;AASA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;AALA;AACA;AAOA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AA/BA;AAgCA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AA3CA;AA4CA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAxDA;AAyDA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAjFA;AAAA;AAAA;AAAA;AAAA;AAkFA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AAAA;AACA;AAHA;AAEA;AACA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAnFA;AAAA;AAAA;AAAA;AAAA;AAuFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AALA;AAAA;AACA;AADA;AAUA;AACA;AACA;AADA;AAGA;AAJA;AAVA;AAAA;AACA;AADA;AAgBA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AACA;AAnBA;AAuBA;AAvBA;AAAA;AAyBA;AACA;AACA;AAHA;AACA;AAzBA;AAwBA;AAKA;AACA;AA9BA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AA+BA;AAAA;AACA;AAhCA;AA+BA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAlCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAxFA;AAkJA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AA1JA;AA2JA;AAIA;AACA;AAhKA;AACA;AADA;AAoKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AACA;AAxNA;AAyNA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAhOA;AAiOA;AAAA;AAAA;AACA;AACA;AAjOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AAdA;AAeA;AACA;;;AA4GA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAmFA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;;;;AAvRA;AACA;AAyRA;AACA;AAGA;AAAA;AAOA;;;;A","sourceRoot":""}