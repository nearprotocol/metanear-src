{"version":3,"file":"static/webpack/static/development/pages/index.js.a3a4a2f8ca22ea8e3a80.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import Component from 'react'\nimport { Tabs, Tab, ToggleButtonGroup, ToggleButton } from 'react-bootstrap'\nimport Head from 'next/head'\n// import { Near } from 'nearlib'\n\nconst USE_WALLET = false;\nconst localStorageVersionKey = \"version\";\nconst localStorageVersion = \"0.0.5\";\nconst contractId = \"metanear-dev-005\";\nconst localStorageKeyCellInfoPrefix = \"cellInfo:\";\nconst localStorageKeyRenderInfoPrefix = \"renderInfo:\";\nconst localStorageKeyImageUrlPrefix = \"images:\";\nconst appTitle = \"Meta NEAR\";\nconst playerImgUrl = '/static/imgs/player.png';\nconst cantDeployImgUrl = '/static/imgs/cant_deploy.png';\nconst viewDistance = 7;\nconst maxFetchDepth = 3;\nconst localNearlibUrl = 'https://cdn.jsdelivr.net/gh/nearprotocol/nearcore@master/nearlib/dist/nearlib.js';\nconst devnetNearlibUrl = 'https://cdn.jsdelivr.net/npm/nearlib@0.5.2/dist/nearlib.js';\nconst DX = [1, 0, -1, 0];\nconst DY = [0, 1, 0, -1];\n\n\nconst locationKey = (location) => JSON.stringify(location);\nconst cellKey = (cell) => locationKey(cell.location);\nconst _offsetCache = [];\nconst isClose = (dx, dy, maxDistance) => (Math.abs(dx) <= maxDistance && Math.abs(dy) <= maxDistance);\nconst cellOffsets = (i) => {\n  if (_offsetCache.length == 0) {\n    for (let dy = -viewDistance; dy <= viewDistance; ++dy) {\n      for (let dx = -viewDistance; dx <= viewDistance; ++dx) {\n        _offsetCache.push({dx, dy});\n      }\n    }\n  }\n  return _offsetCache[i];\n};\n\nclass Grid extends React.Component {\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const canvas = this.refs.canvas\n    const ctx = canvas.getContext(\"2d\")\n    ctx.clearRect(0, 0, this.props.width, this.props.height);\n    const centerX = this.props.width / 2 - this.props.cellWidth / 2\n    const centerY = this.props.height / 2 - this.props.cellHeight / 2\n    const cellNumberX = this.props.width / this.props.cellWidth\n    const cellNumberY = this.props.height / this.props.cellHeight\n    const dxDy = (location) => {\n      return {\n        dx: location.x - (this.props.player && this.props.player.location.x),\n        dy: location.y - (this.props.player && this.props.player.location.y),\n      };\n    }\n    const dxDyRect = (d) => {\n      return {\n        x: centerX + d.dx * this.props.cellWidth,\n        y: centerY + d.dy * this.props.cellHeight,\n        width: this.props.cellWidth,\n        height: this.props.cellHeight,\n      }\n    };\n    const renderImg = (rect, imageUrl) => {\n      if (!imageUrl) {\n        return;\n      }\n      let image = this.props.images[imageUrl];\n      if (image) {\n        ctx.drawImage(image, 0, 0, image.width, image.height, rect.x, rect.y, rect.width, rect.height);\n        return true;\n      }\n      return false;\n    }\n    const render = (rect, renderInfo, depth) => {\n      const backgroundRenderInfo = renderInfo && (renderInfo.backgroundRenderId) && this.props.renderInfos[renderInfo.backgroundRenderId];\n    }\n    Object.values(this.props.allCells).forEach((cell) => {\n      let cellInfo = this.props.cellInfos[cell.cellId];\n      const d = dxDy(cell.location);\n      const rect = dxDyRect(d);\n      const renderInfo = cellInfo && this.props.renderInfos[cellInfo.renderId];\n      render(rect, backgroundRenderInfo);\n      let rendered = render(rect, renderInfo, 0);\n      if (!rendered) {\n        ctx.fillStyle = 'rgba(64, 0, 0, 1.0)';\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n      }\n      if (this.props.actionType == 'deploy') {\n        if (!cell.canDeploy) {\n          renderImg(rect, cantDeployImgUrl);\n        }\n      }\n    })\n    renderImg(dxDyRect({dx: 0, dy: 0}), playerImgUrl);\n    if (this.props.actionType == 'move') {\n      const path = this.props.movePath;\n      if (path) {\n        let pos = {\n          dx: 0,\n          dy: 0,\n        };\n        for (let i = 0; i < path.length; ++i) {\n          pos = {\n            dx: pos.dx + DX[path[i]],\n            dy: pos.dy + DY[path[i]],\n          }\n          renderImg(dxDyRect(pos), playerImgUrl);\n        }\n      }\n    }\n    canvas.addEventListener('mousemove', this.onMouseMove, false)\n  }\n  componentWillUnmount() {\n    canvas.removeEventListener('mousemove', this.onMouseMove, false)\n  }\n  onMouseMove = (e) => {\n    const centerX = this.props.width / 2 - this.props.cellWidth / 2\n    const centerY = this.props.height / 2 - this.props.cellHeight / 2\n    this.props.onHighlight(\n      Math.floor((e.offsetX - centerX) / this.props.cellWidth) + (this.props.player && this.props.player.location.x),\n      Math.floor((e.offsetY - centerY) / this.props.cellHeight) + (this.props.player && this.props.player.location.y))\n  }\n  render() {\n    return (\n      <div>\n        <canvas ref=\"canvas\" width={this.props.width} height={this.props.height} onClick={this.props.onClick} />\n      </div>\n    )\n  }\n}\n\nclass WalletLogin extends React.Component {\n  render() {\n    return (\n      <div id=\"sign-in-container\">\n        <h2> Hello stranger! Who are you?</h2>\n        <div id=\"login-form\">\n          <div className=\"col-md-4\"><button onClick={this.props.onClick} id=\"login-button\" className=\"btn btn-lg btn-block btn-primary\">Login with NEAR Wallet</button></div>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass WalletLogout extends React.Component {\n  render() {\n    return (\n      <div id=\"hello\">\n        <h2 id=\"hello\">Hi, {this.props.accountId}!</h2>\n      </div>\n    )\n  }\n}\n\nclass MiniGameView extends React.Component {\n  render() {\n    return (\n      <iframe src={this.props.url} frameBorder=\"0\" width=\"100%\" height=\"100%\" style={{ minHeight: 600 }}/>\n    )\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      allCells: {},\n      highlightCell: {},\n      images: {},\n      imageIds: {},\n      renderInfos: {},\n      movePath: null,\n      player: null,\n      cellInfos: {},\n      tabKey: \"info\",\n      actionType: \"move\",\n    };\n    this.fetchingImages = {};\n    this.fetchingImageIds = {};\n    this.fetchingCellInfos = {};\n    this.fetchingRenderInfos = {};\n    this.walletAccount = null;\n  }\n  maybeFetchImage = (imageUrl) => {\n    if (!imageUrl || imageUrl in this.fetchingImages) {\n      return;\n    }\n    this.fetchingImages[imageUrl] = true;\n    const image = new Image();\n    image.onload = () => {\n      const images = {};\n      images[imageUrl] = image;\n      this.setState({\n        images: Object.assign(this.state.images, images),\n      });\n    };\n    image.src = imageUrl;\n  }\n  maybeFetchImageId = (imageId) => {\n    if (imageId in this.fetchingImageIds) {\n      return;\n    }\n    this.fetchingImageIds[imageId] = true;\n    this.contract.getImageUrl({imageId})\n      .then((imageUrl) => {\n        let imageIds = {};\n        imageIds[imageId] = imageUrl;\n        localStorage.setItem(localStorageKeyImageUrlPrefix + imageId, imageUrl);\n        this.maybeFetchImage(imageUrl);\n        this.setState({\n          imageIds: Object.assign(this.state.imageIds, imageIds),\n        });\n      })\n      .catch((e) => {\n        console.log(e);\n        this.fetchingImageIds[imageId] = null;\n      });\n  }\n  maybeFetchRenderInfo = (renderId, depth) => {\n    if (renderId in this.fetchingRenderInfos || depth > maxFetchDepth) {\n      return;\n    }\n    this.fetchingRenderInfos[renderId] = true;\n    this.contract.getRenderInfo({renderId})\n      .then((renderInfo) => {\n        renderInfo.renderId = renderId;\n        const renderInfos = {};\n        renderInfos[renderId] = renderInfo;\n        localStorage.setItem(localStorageKeyRenderInfoPrefix + renderId, JSON.stringify(renderInfo))\n        this.maybeFetchImageId(renderInfo.imageId);\n        this.maybeFetchRenderInfo(renderInfo.backgroundRenderId, depth + 1);\n        this.setState({\n          renderInfos: Object.assign(this.state.renderInfos, renderInfos),\n        });\n      })\n      .catch((e) => {\n        console.log(e);\n        this.fetchingRenderInfos[cellId] = null;\n      });\n  }\n  maybeFetchCellInfo = (cellId) => {\n    if (cellId in this.fetchingCellInfos) {\n      return;\n    }\n    this.fetchingCellInfos[cellId] = true;\n    this.contract.getCellInfo({cellId})\n      .then((cellInfo) => {\n        cellInfo.cellId = cellId;\n        const cellInfos = {};\n        cellInfos[cellId] = cellInfo;\n        localStorage.setItem(localStorageKeyCellInfoPrefix + cellId, JSON.stringify(cellInfo))\n        this.maybeFetchRenderInfo(cellInfo.renderId);\n        this.setState({\n          cellInfos: Object.assign(this.state.cellInfos, cellInfos),\n        });\n      })\n      .catch((e) => {\n        console.log(e);\n        this.fetchingCellInfos[cellId] = null;\n      });\n  }\n  updateView = (view) => {\n    let cells = {};\n    let player = Object.assign({}, this.state.player, {location: view.location});\n    if (view.cellIds) {\n      view.cellIds.forEach((cellId, i) => {\n        let location = {\n          x: view.location.x + cellOffsets(i).dx,\n          y: view.location.y + cellOffsets(i).dy,\n        }\n        let cell = {\n          location,\n          cellId,\n          canDeploy: view.freeCells && view.freeCells[i],\n        };\n        this.maybeFetchCellInfo(cellId);\n        cells[cellKey(cell)] = cell\n      })\n    }\n    this.setState({\n      player,\n      allCells: cells,\n      movePath: null,\n      highlightCell: null,\n    })\n  }\n  fetchCells = async(withOwned) => {\n    let accountId = this.state.player ? this.state.player.accountId : 'metanear';\n    let view = await this.contract.lookAround({ accountId, withOwned })\n    this.updateView(view);\n  }\n  nearConnect = async () => {\n    let near, accountId;\n    if (USE_WALLET) {\n      this.walletAccount = new nearlib.WalletAccount(contractId, \"https://wallet.nearprotocol.com/\");\n      accountId = this.walletAccount.getAccountId();\n      near = new nearlib.Near(new nearlib.NearClient(\n        this.walletAccount,\n        new nearlib.LocalNodeConnection(\"https://studio.nearprotocol.com/devnet\"),\n      ));\n    } else {\n      const settings = {\n        deps: {\n          createAccount: nearlib.dev.createAccountWithLocalNodeConnection\n        },\n        nodeUrl: 'http://localhost:3030',\n        baseUrl: 'http://localhost:3030',\n        // helperUrl: 'http://localhost:4000',\n      };\n      near = await nearlib.dev.connect(settings);\n      accountId = nearlib.dev.myAccountId;\n      this.walletAccount = {\n        isSignedIn: () => true,\n        getAccountId: () => accountId,\n      };\n    }\n    console.log(accountId);\n    this.contract = await near.loadContract(contractId, {\n      viewMethods: [\"lookAround\", \"getPlayer\", \"getCellInfo\", \"getRenderInfo\", \"getImageUrl\"],\n      changeMethods: [\"move\", \"deploy\", \"init\", \"createNewCell\", \"createNewRender\"],\n      sender: accountId,\n    });\n    window.contract = this.contract\n    if (accountId) {\n      let player = await this.contract.getPlayer({accountId})\n      console.log(player)\n      this.setState({player, tabKey: \"map\"})\n    }\n    await this.fetchCells(false);\n  }\n  componentDidMount() {\n    if (localStorage.getItem(localStorageVersionKey) != localStorageVersion) {\n      localStorage.clear();\n      localStorage.setItem(localStorageVersionKey, localStorageVersion);\n    }\n    let imageIds = {};\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith(localStorageKeyImageUrlPrefix)) {\n        try {\n          let imageUrl = localStorage.getItem(key);\n          let imageId = parseInt(key.substr(localStorageKeyImageUrlPrefix.length));\n          this.maybeFetchImage(imageUrl);\n          imageIds[imageId] = imageUrl;\n          this.fetchingImageIds[imageId] = true;\n        } catch (err) {\n          // whatever\n        }\n      }\n    });\n    let renderInfos = {};\n    let chainRenderIds = {};\n    let chainImageIds = {};\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith(localStorageKeyRenderInfoPrefix)) {\n        try {\n          let renderInfo = JSON.parse(localStorage.getItem(key));\n          if (localStorageKeyRenderInfoPrefix + renderInfo.renderId == key) {\n            chainImageIds[renderInfo.imageId] = true;\n            chainRenderIds[renderInfo.backgroundRenderId] = 1;\n            renderInfos[renderInfo.renderId] = renderInfo;\n            this.fetchingRenderInfos[renderInfo.renderId] = true;\n          }\n        } catch (err) {\n          // whatever\n        }\n      }\n    });\n    let cellInfos = {};\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith(localStorageKeyCellInfoPrefix)) {\n        try {\n          let cellInfo = JSON.parse(localStorage.getItem(key));\n          if (localStorageKeyCellInfoPrefix + cellInfo.cellId == key) {\n            chainRenderIds[cellInfo.renderId] = 0;\n            cellInfos[cellInfo.cellId] = cellInfo;\n            this.fetchingCellInfos[cellInfo.cellId] = true;\n          }\n        } catch (err) {\n          // whatever\n        }\n      }\n    });\n    this.setState({ imageIds, cellInfos, renderInfos });\n    this.maybeFetchImage(playerImgUrl);\n    this.maybeFetchImage(cantDeployImgUrl);\n    this.nearConnect().then(() => {\n      Object.keys(chainImageIds).forEach((imageId) => {\n        this.maybeFetchImageId(imageId);\n      });\n      Object.entries(chainRenderIds).forEach((renderId, value) => {\n        this.maybeFetchRenderInfo(renderId, 1);\n      });\n    })\n  }\n  onHighlight = (x, y) => {\n    let highlightCell = this.state.allCells[locationKey({x, y})]\n    if (highlightCell != this.state.highlightCell) {\n      const movePath = (this.state.actionType == 'move') ? this.calculatePath(highlightCell) : null;\n      this.setState({\n        highlightCell,\n        movePath,\n      })\n    }\n  }\n  login = () => {\n    this.walletAccount.requestSignIn(\n      contractId,\n      appTitle,\n    );\n  }\n  logout = () => {\n\n  }\n  calculatePath = (targetCell) => {\n    if (!this.state.player || !targetCell) {\n      return null;\n    }\n    const px = this.state.player.location.x;\n    const py = this.state.player.location.y;\n    const tx = targetCell.location.x;\n    const ty = targetCell.location.y;\n    const visited = {};\n    const q = [];\n    const add = (st, forced) => {\n      const key = locationKey({\n        x: st.x,\n        y: st.y,\n      });\n      if (!forced) {\n        if (key in visited || !(key in this.state.allCells)) {\n          return;\n        }\n        let cellInfo = this.state.cellInfos[this.state.allCells[key].cellId];\n        if (!cellInfo || cellInfo.blocking) {\n          return;\n        }\n      }\n      visited[key] = st;\n      q.push(st);\n    }\n    add({\n      x: px,\n      y: py,\n      dir: -1,\n      last: null,\n    }, true);\n    for (let i = 0; i < q.length; ++i) {\n      let cur = q[i];\n      if (cur.x == tx && cur.y == ty) {\n        // found\n        let path = [];\n        while (cur.last != null) {\n          path.push(cur.dir);\n          cur = cur.last;\n        }\n        return path.reverse();\n      }\n      for (let j = 0; j < 4; ++j) {\n        add({\n          x: cur.x + DX[j],\n          y: cur.y + DY[j],\n          dir: j,\n          last: cur,\n        }, false);\n      }\n    }\n    return null;\n  }\n  movePlayer = () => {\n    if (!this.state.movePath) {\n      return\n    }\n    this.contract.move({path: this.state.movePath})\n      .then((res) => this.updateView(res.lastResult))\n      .catch((e) => console.log(e));\n  }\n  takeAction = () => {\n    if (this.state.actionType == 'move') {\n      return this.movePlayer();\n    }\n  }\n  handleActionChange = (actionType) => {\n    if (this.state.actionType != actionType) {\n      this.setState({actionType});\n      if (actionType == 'deploy') {\n        this.fetchCells(true).catch(console.log);\n      }\n    }\n  }\n  render() {\n    let control;\n    if (this.walletAccount && this.walletAccount.isSignedIn()) {\n      control = <WalletLogout accountId={this.walletAccount.getAccountId()} onClick={this.logout} />\n    } else {\n      control = <WalletLogin onClick={this.login} />\n    }\n    let cellInfo = null;\n    if (this.state.player) {\n      let cell = this.state.allCells[locationKey(this.state.player.location)];\n      if (cell) {\n        let cellId = cell.cellId;\n        cellInfo = this.state.cellInfos[cellId];\n      }\n    }\n    const isWebPage = cellInfo && !!cellInfo.webUrl;\n    return (\n      <Tabs\n        id=\"controlled-tab-example\"\n        activeKey={this.state.tabKey}\n        onSelect={tabKey => this.setState({ tabKey })}\n      >\n        <Tab eventKey=\"info\" title= \"📜Info\">\n          {control}\n        </Tab>\n        <Tab eventKey=\"map\" title=\"🌎World\">\n          <Grid width={32 * 15} height={32 * 15} cellWidth={32} cellHeight={32}\n                allCells={this.state.allCells}\n                onHighlight={this.onHighlight}\n                images={this.state.images}\n                cellInfos={this.state.cellInfos}\n                renderInfos={this.state.renderInfos}\n                player={this.state.player}\n                movePath={this.state.movePath}\n                actionType={this.state.actionType}\n                onClick={this.takeAction} />\n          <ToggleButtonGroup\n            aria-label=\"Action\"\n            name=\"action-types\"\n            value={this.state.actionType}\n            onChange={(v) => this.handleActionChange(v)}\n          >\n            <ToggleButton variant=\"outline-secondary\" value={\"inspect\"}>👀Inspect</ToggleButton>\n            <ToggleButton variant=\"outline-secondary\" value={\"move\"}>👣Move</ToggleButton>\n            <ToggleButton variant=\"outline-secondary\" value={\"deploy\"}>🏗Build</ToggleButton>\n          </ToggleButtonGroup>\n        </Tab>\n        <Tab eventKey=\"cell-view\" title=\"🏢Cell View\" disabled={!isWebPage}>\n          {isWebPage && <MiniGameView url={cellInfo.webUrl} contractId={cellInfo.contractId} />}\n        </Tab>\n        <Tab eventKey=\"chat\" title=\"💬Chat\" disabled>\n          Bla\n        </Tab>\n      </Tabs>\n    )\n  }\n}\n\nexport default () => {\n  return (\n    <div>\n      <Head>\n        <script src={USE_WALLET ? devnetNearlibUrl : localNearlibUrl}></script>\n      </Head>\n      <div>\n        <Game />\n      </div>\n    </div>\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AA4EA;AACA;AACA;AACA;AAAA;AAGA;AACA;;;;;;AAlFA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AACA;AACA;AACA;;;AAQA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAzFA;AACA;AA2FA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAVA;AACA;AAYA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;;;;AAPA;AACA;AASA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;AALA;AACA;AAOA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAqBA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AAnCA;AAoCA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAvDA;AAwDA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AA7EA;AA8EA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAlGA;AAmGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AA3HA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2HA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AAAA;AAAA;AACA;AAHA;AAEA;AACA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA5HA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAgIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AALA;AAAA;AACA;AADA;AAUA;AACA;AACA;AADA;AAGA;AACA;AACA;AANA;AAVA;AAAA;AACA;AADA;AAkBA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AACA;AArBA;AAyBA;AAzBA;AAAA;AA2BA;AACA;AACA;AAHA;AACA;AA3BA;AA0BA;AAKA;AACA;AAhCA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAiCA;AAAA;AACA;AAlCA;AAiCA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AApCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAjIA;AAwOA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAjPA;AAkPA;AAIA;AACA;AAvPA;AACA;AADA;AA2PA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AACA;AAjTA;AAkTA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAzTA;AA0TA;AACA;AACA;AACA;AACA;AA9TA;AA+TA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AApUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AAlBA;AAmBA;AACA;;;AAmJA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAgGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;;;;AA9XA;AACA;AAgYA;AACA;AAGA;AAAA;AAOA;;;;A","sourceRoot":""}